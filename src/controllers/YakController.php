<?php
namespace kordar\yak\controllers;

use kordar\yak\behaviors\RbacFilter;
use kordar\yak\helpers\YakConfigHelper;
use kordar\yak\helpers\LoggerHelper;
use yii\filters\VerbFilter;
use yii\web\Controller;

class YakController extends Controller
{
    protected $template = '';

    protected $rbacExcept = [];
    protected $rbacJsonMessageOnly = [];

    protected $verbs = [
        'delete' => ['POST']
    ];

    public function init()
    {
        $this->template = YakConfigHelper::config('yak.template', 'ace');
        $GLOBALS['yak_sign'] = $this->template;
        $this->layout = '@kordar/yak/views/layouts/' . $this->template . '/main.php';
    }

    public function renderTpl($view, $params = [])
    {
        return parent::render($this->template . '/' . $view, $params); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => $this->verbs,
            ],
            'rbac' => [
                'class' => RbacFilter::className(),
                'except' => $this->rbacExcept,
                'jsonMessageOnly' => $this->rbacJsonMessageOnly
            ]
        ];
    }

    protected $closeCsrfValidate = ['upload'];

    public function beforeAction($action)
    {
        if(in_array($action->id, $this->closeCsrfValidate)) {
            $action->controller->enableCsrfValidation = false;
        }
        return parent::beforeAction($action);
    }

    protected function writeLogger()
    {
        return [];
    }

    public function afterAction($action, $result)
    {
        $logger = $this->writeLogger();
        if (key_exists($action->id, $logger)) {
            LoggerHelper::writeLogger($logger[$action->id]);
        }

        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }


}